package com.siongriffiths.nppcdatavisualiser.plants;

import com.siongriffiths.nppcdatavisualiser.data.Metadata;
import com.siongriffiths.nppcdatavisualiser.data.TagData;

import javax.persistence.*;
import java.util.*;

/**
 * Created on 08/03/2016.
 *
 * @author Si√¥n Griffiths / sig2@aber.ac.uk
 * PlantDay is an entity class managed by Hibernate ORM persistence. The PlantDay is a domain class
 * reprsenting a day in the life of a plant. Essentailly a wrapper for the many images per day of a given plant.
 * This class represents a table in the database
 */
@Entity
public class PlantDay implements Comparable<PlantDay>{


    /**
     * Autogenerated ID for each instance
     */
    private long id;

    /**
     * MetaData instance for the plant
     */
    private Metadata metadata;

    /**
     * List of PLantImages associated with this PlantDay
     */
    private List<PlantImage> plantImages;

    /**
     * The date of this PlantDay
     */
    private Date date;

    /**
     * Collection of associated TagData instances
     */
    private Set<TagData> tags;

    /**
     * The Plant instance associated with this PlantDay
     */
    private Plant plant;

    /**
     * Constructors ensuring key structures not null
     */
    public PlantDay(){
        new PlantDay(new Date());
    }

    public PlantDay(Date date){
        this.date = date;
        plantImages = new ArrayList<>();
        tags = new HashSet<>();
        metadata = new Metadata();
    }

    /**
     * Gets the instance ID. Annotated as Id or primary key in the database
     * @return the TagData instance ID
     */
    @Id
    @GeneratedValue(strategy = GenerationType.AUTO)
    public long getId() {
        return id;
    }

    /**
     * Sets the ID
     * @param id the id
     */
    public void setId(long id) {
        this.id = id;
    }

    /**
     * Gets the PlantImages associated with this PlantDay. Defines a unidirectional One-to-Many relationship with no
     * reference on the other end. Defines cascade and fetch behaviours
     * @return The PlantImages associated with this
     */
    @OneToMany(cascade = {CascadeType.ALL}, fetch = FetchType.LAZY)
    @JoinColumn(name = "plantDay_id")
    public List<PlantImage> getPlantImages() {
        return plantImages;
    }

    /**
     * Sets the PlantImages for this PlantDay
     * @param plantImages the PlantIMages
     */
    public void setPlantImages(List<PlantImage> plantImages) {
        this.plantImages = plantImages;
    }

    /**
     * Associates a PlantImage with this PlantDay
     * @param plantImage the PlantImage
     */
    public void addPlantImage(PlantImage plantImage){
        plantImages.add(plantImage);
    }

    /**
     * Gets the Plant associated with this PlantDay. Defines half of a bi-directional Many-to-one relationship and
     * specifies the column name for the relationship key
     * @return the Plant associated with this PlantDay
     */
    @ManyToOne
    @JoinColumn(name = "plant_id", nullable = false)
    public Plant getPlant() {
        return plant;
    }

    /**
     * Sets the Plant for the PlantDay
     * @param plant the Plant
     */
    public void setPlant(Plant plant) {
        this.plant = plant;
    }

    /**
     * Gets the Metadata instance associated with this PlantDay. Defined as a Unidirectional One-to-One relationship with a
     * reference on the PlantDay side only. Specifies a named column in the Plant table for the MetaData instance ID
     * @return the Metadata instance associated with this PlantDay
     */
    @OneToOne(cascade = {CascadeType.ALL})
    @JoinColumn(name="plant_day_meta_data_id")
    public Metadata getMetadata() {
        return metadata;
    }

    /**
     * Sets the Metadata instance for this PlantDay
     * @param metadata the Metadata instance
     */
    public void setMetadata(Metadata metadata) {
        this.metadata = metadata;
    }


    /**
     * Gets the date for this PlantDay
     * @return the Date
     */
    public Date getDate() {
        return date;
    }

    /**
     * Sets the Date for the PlantDay
     * @param date The Date
     */
    public void setDate(Date date) {
        this.date = date;
    }

    /**
     * Gets the TagData instances associated with this PlantDay. Defines a Many-to-Many relationship
     * using a separate named join table and defines the keys for both sides which make up the join table.
     * Defines cascade and lazy fetch behaviors
     * @return A Set of TagData associated with this PlantDay
     */
    @ManyToMany(cascade=CascadeType.ALL, fetch = FetchType.LAZY)
    @JoinTable(name="plantday_tag",
            joinColumns=@JoinColumn(name="plantday_id"),
            inverseJoinColumns = @JoinColumn(name="tag_id"))
    public Set<TagData> getTags() {
        return tags;
    }

    /**
     * Sets the TagData Set associated with this PlantDay
     @param tags the TagData set
     */
    public void setTags(Set<TagData> tags) {
        this.tags = tags;
    }

    /**
     * Associates a TagData instance with this PlantDay
     * @param tag the TagData
     */
    public void addTag(TagData tag){
        tags.add(tag);
    }

    /**
     * Comparable compareTo implementation, uses the Date object value for this PLantDay for comparison
     * @param o the Other PLantDay for comparison
     * @return Int value representing the compare result
     */
    @Override
    public int compareTo(PlantDay o) {
        return this.getDate().compareTo(o.getDate());
    }


}
