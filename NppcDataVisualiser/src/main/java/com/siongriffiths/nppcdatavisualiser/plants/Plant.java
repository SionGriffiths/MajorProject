package com.siongriffiths.nppcdatavisualiser.plants;

import com.siongriffiths.nppcdatavisualiser.data.Metadata;
import com.siongriffiths.nppcdatavisualiser.data.TagData;
import com.siongriffiths.nppcdatavisualiser.experiment.Experiment;

import javax.persistence.*;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

/**
 * Created on 26/02/2016.
 *
 * @author Si√¥n Griffiths / sig2@aber.ac.uk
 *
 * Plant is an entity class managed by Hibernate ORM persistence. The Plant is a domain class
 * reprsenting experiment plants in the system. This class represents a table in the database and defines the
 * unique constraint that only one Plant instance can exist with a given bar code
 */
@Entity
@Table(uniqueConstraints = @UniqueConstraint(columnNames = {"bar_code"}))
public class Plant {

    /**
     * Autogenerated ID for each instance
     */
    private long id;

    /**
     * MetaData instance for the plant
     */
    private Metadata metadata;

    /**
     * List of associated PlantDays
     */
    private List<PlantDay> plantDays;

    /**
     * Collection of associated TagData instances
     */
    private Set<TagData> tags;

    /**
     * Plant barcode, unique for each Plant record
     */
    private String barCode;

    /**
     * The Experiment to which the plant belongs
     */
    private Experiment experiment;

    //Default constructor required for mapping from orm
    public Plant(){}

    /**
     * Constructor ensuring collections not null
     * @param barCode plant barcode
     */
    public Plant(String barCode){
        this.barCode = barCode;
        metadata = new Metadata();
        plantDays = new ArrayList<>();
        tags = new HashSet<>();
    }

    /**
     * Gets the instance ID. Annotated as Id or primary key in the database
     * @return the TagData instance ID
     */
    @Id
    @GeneratedValue(strategy = GenerationType.AUTO)
    public long getId() {
        return id;
    }

    /**
     * Sets the ID
     * @param id the id
     */
    public void setId(long id) {
        this.id = id;
    }

    /**
     * Associate a PlantDay instance with this Plant
     * @param plantDay the PlantDay
     */
    public void addPlantDay(PlantDay plantDay){
        plantDays.add(plantDay);
    }

    /**
     * Gets the Metadata instance associated with this Plant. Defined as a Unidirectional One-to-One relationship with a
     * reference on the Plant side only. Specifies a named column in the Plant table for the MetaData instance ID
     * @return the Metadata instance associated with this Plant
     */
    @OneToOne(cascade = {CascadeType.ALL})
    @JoinColumn(name="plant_meta_data_id")
    public Metadata getMetadata() {
        return metadata;
    }

    /**
     * Sets the Metadata instance for this Plant
     * @param metadata the Metadata instance
     */
    public void setMetadata(Metadata metadata) {
        this.metadata = metadata;
    }

    /**
     * Gets the PlantDays associated with this Plant. Defines a bi-directional One-to-Many relationship between
     * Plants and PlantDays. Specifying the mapping of the key in the other table, cascade behaviour and ensures lazy
     * fetching meaning that PlantDays will be proxy objects unless explicitly initialised.
     * @return a list of PlantDays associated with this experiment
     */
    @OneToMany(mappedBy = "plant",cascade = {CascadeType.ALL}, fetch = FetchType.LAZY)
    public List<PlantDay> getPlantDays() {
        return plantDays;
    }

    /**
     * Sets the PlantDays associated with this Plant
     * @param plantDays the PlantDays
     */
    public void setPlantDays(List<PlantDay> plantDays) {
        this.plantDays = plantDays;
    }

    /**
     * Gets the TagData instances associated with this Plant. Defines a Many-to-Many relationship
     * using a separate named join table and defines the keys for both sides which make up the join table.
     * Defines cascade and lazy fetch behaviors
     * @return A Set of TagData associated with this Plant
     */
    @ManyToMany(cascade=CascadeType.ALL, fetch = FetchType.LAZY)
    @JoinTable(name="plant_tag",
            joinColumns=@JoinColumn(name="plant_id"),
            inverseJoinColumns = @JoinColumn(name="tag_id"))
    public Set<TagData> getTags() {
        return tags;
    }

    /**
     * Sets the TagData Set associated with this Plant
     * @param tags the TagData set
     */
    public void setTags(Set<TagData> tags) {
        this.tags = tags;
    }

    /**
     * Associates a TagData instance with this Plant
     * @param tag the TagData
     */
    public void addTag(TagData tag){
        tags.add(tag);
    }

    /**
     * Gets the bar code for this Plant instance. Column is named explicitly to ensure
     * accurate mapping of the defined unique constraint on the table
     * @return the bar code
     */
    @Column(name = "bar_code")
    public String getBarCode() {
        return barCode;
    }

    /**
     * Sets the bar code for this Plant
     * @param barCode the bar code
     */
    public void setBarCode(String barCode) {
        this.barCode = barCode;
    }

    /**
     * Gets the experiment associated with this Plant. Defines half of a bi-directional Many-to-one relationship and
     * specifies the column name for the relationship key
     * @return the Experiement associated with this Plant
     */
    @ManyToOne
    @JoinColumn(name = "experiment_id")
    public Experiment getExperiment() {
        return experiment;
    }

    /**
     * Sets the Experiment for this Plant
     * @param experiment the Experiement
     */
    public void setExperiment(Experiment experiment) {
        this.experiment = experiment;
    }
}
