package com.siongriffiths.nppcdatavisualiser.experiment;

import com.siongriffiths.nppcdatavisualiser.plants.Plant;

import javax.persistence.*;
import java.util.ArrayList;
import java.util.List;

/**
 * Created on 08/03/2016.
 *
 * @author Si√¥n Griffiths / sig2@aber.ac.uk
 *
 * Experiment is an entity class managed by Hibernate ORM persistence. The Experiment is a domain class
 * reprsenting an Experiment which is the top level in the domain model heirachy in the system and can effectively be
 * thought of as a wrapper for plant and data objects. This class represents a table in the database with a specified
 * uniqueness constraint on the experiment code.
 */
@Entity
@Table(uniqueConstraints = @UniqueConstraint(columnNames = {"experiment_code"}))
public class Experiment {

    /**
     * Autogenerated ID for each instance
     */
    private Integer id;

    /**
     * The experiemntCode
     */
    private String experimentCode;

    /**
     * A list of associated plant instances
     */
    private List<Plant> plants;

    /**
     * The status of the experiment
     */
    private ExperimentStatus status;

    /**
     * Constructors ensuring plant list is never null
     */
    public Experiment(){
        plants = new ArrayList<>();
    }

    public Experiment(String experimentCode){
        this();
        this.experimentCode = experimentCode;
    }

    /**
     * Gets the instance ID. Annotated as Id or primary key in the database
     * @return the Metadata instance ID
     */
    @Id
    @GeneratedValue(strategy = GenerationType.AUTO)
    public Integer getId() {
        return id;
    }

    /**
     * Sets the ID
     * @param id the id
     */
    public void setId(Integer id) {
        this.id = id;
    }

    /**
     * Gets the experiment code. Column is named explicitly to ensure
     * accurate mapping of the defined unique constraint on the table
     * @return the experiment code
     */
    @Column(name = "experiment_code")
    public String getExperimentCode() {
        return experimentCode;
    }

    /**
     * Sets the experiment code
     * @param experimentCode the code
     */
    public void setExperimentCode(String experimentCode) {
        this.experimentCode = experimentCode;
    }

    /**
     * Associuates a plant with this experiment
     * @param plant the plant
     */
    public void addPlant(Plant plant){
        plants.add(plant);
    }

    /**
     * Gets the plants associated with this experiment. Defines a bi-directional ONe-to-Many relationship between
     * experiments and plants. Specifying the mapping of the key in the other table, cascade behaviour and ensures lazy
     * fetching meaning that plants will be proxy objects unless explicitly initialised.
     * @return a list of plants associated with this experiment
     */
    @OneToMany(mappedBy = "experiment",cascade = {CascadeType.ALL}, fetch = FetchType.LAZY)
    public List<Plant> getPlants() {
        return plants;
    }

    /**
     * Sets the plants list
     * @param plants plants list
     */
    public void setPlants(List<Plant> plants) {
        this.plants = plants;
    }

    /**
     * Gets the experiment status. Annotation ensures the enum column has String type not blob in the database
     * @return the experiment status
     */
    @Enumerated(EnumType.STRING)
    public ExperimentStatus getStatus() {
        return status;
    }

    /**
     * Sets the experiment status
     * @param status the status
     */
    public void setStatus(ExperimentStatus status) {
        this.status = status;
    }

}
